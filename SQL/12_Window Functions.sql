use swiggy;
select * from restaurant;

-- Common Window Functions
-- Ranking Functions: RANK(), DENSE_RANK(), ROW_NUMBER()
-- Aggregate Functions: SUM(), AVG(), MIN(), MAX()
-- Value Functions: LEAD(), LAG(), FIRST_VALUE(), LAST_VALUE()

-- Create new column having avg rating of restaurant through the dataset
select *, avg(rating) over() as 'avg_rating' from restaurant;

-- Create new column having avg rating_count of restaurant through the dataset
select *, avg(rating_cnt) over() as 'avg_rating_cnt' from restaurant;

-- Create new column having avg cost of city where the specific restaurant is from
select *,avg(cost) over(partition by city) as 'avg_cost' from restaurant;

-- Create both column together
select *,
avg(cost) over(partition by city) as 'avg_cost_city',
avg(cost) over(partition by cuisine) as 'avg_cost_cuisine' 
from restaurant;

-- Aggregate Statistics Across Dataset
SELECT id, name, city, cuisine, rating,
       ROUND(MAX(rating) OVER(), 2) AS max_rating,
       ROUND(AVG(rating) OVER(), 2) AS avg_rating,
       ROUND(MIN(rating) OVER(), 2) AS min_rating,
       ROUND(MAX(cost) OVER(), 2) AS max_cost,
       ROUND(AVG(cost) OVER(), 2) AS avg_cost,
       ROUND(MIN(cost) OVER(), 2) AS min_cost
FROM restaurants;

-- Restaurants Above Average Cuisine Cost
SELECT *
FROM (SELECT *, AVG(cost) OVER(PARTITION BY cuisine) AS avg_cost FROM restaurants) AS t
WHERE cost > avg_cost;


--  List the Top 5 Cuisines by Revenue Generated by the Top 5 Restaurants of Every Cuisine

SELECT cuisine, SUM(rating_count * cost) AS 'revenue'
FROM (
    SELECT *,
           cost * rating_count,
           ROW_NUMBER() OVER(PARTITION BY cuisine ORDER BY cost * rating_count DESC) AS 'rank'
    FROM restaurants
) t
WHERE t.rank <= 5
GROUP BY cuisine
ORDER BY revenue DESC;

-- Determine the Total Revenue Generated by the Top 1% of Restaurants

SELECT SUM(cost * rating_count) AS 'revenue'
FROM (
    SELECT *,
           cost * rating_count,
           ROW_NUMBER() OVER(ORDER BY cost * rating_count DESC) AS 'rank'
    FROM restaurants
) t
WHERE t.rank <= 614;

-- Determine the Total Revenue Generated by the Top 20% of Restaurants

SELECT SUM(cost * rating_count) AS 'revenue'
FROM (
    SELECT *,
           cost * rating_count,
           ROW_NUMBER() OVER(ORDER BY cost * rating_count DESC) AS 'rank'
    FROM restaurants
) t
WHERE t.rank <= 12280;

-- Percentage of Revenue Generated by the Top 20% of Restaurants

WITH 
    q1 AS (
        SELECT SUM(cost * rating_count) AS 'top_revenue'
        FROM (
            SELECT *,
                   cost * rating_count,
                   ROW_NUMBER() OVER(ORDER BY cost * rating_count DESC) AS 'rank'
            FROM restaurants
        ) t
        WHERE t.rank <= 12280
    ),
    q2 AS (
        SELECT SUM(cost * rating_count) AS 'total_revenue'
        FROM restaurants
    )
SELECT (top_revenue / total_revenue) * 100 AS 'revenue_percentage'
FROM q1, q2;